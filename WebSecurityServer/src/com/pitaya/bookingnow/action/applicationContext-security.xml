<?xml version="1.0" encoding="UTF-8"?>


<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<http auto-config="true" access-denied-page="/403.jsp"><!-- 当访问被拒绝时，会转到403.jsp -->
		<intercept-url pattern="/Page/Common/*.jsp" access="ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/Image/*.jpg" access="ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/JS/*.js" access="ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/CSS/*.css" access="ROLE_ANONYMOUS,IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/**/*" access="ROLE_USER,ROLE_CHEF,ROLE_WAITER,ROLE_CASHIER,ROLE_MANAGER,ROLE_ADMIN" />
		
		  
		<form-login login-page="/Page/Common/login.jsp" authentication-failure-url="/Page/Common/login.jsp?error=true"
			default-target-url="/index.jsp" />
			<!--"记住我"功能，采用持久化策略(将用户的登录信息存放在数据库表中) -->
		<!-- <remember-me/> -->
		<!-- 用户退出的跳转页面 -->
		<logout logout-success-url="/Page/Common/login.jsp" invalidate-session="true" 
			logout-url="/logoutUser.action" />
		<!-- 会话管理，设置最多登录异常，error-if-maximum-exceeded = false为第二次登录就会使前一个登录失效 -->
		 <session-management invalid-session-url="/Page/Common/sessionTimeout.jsp">
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
		</session-management>
		
		<http-basic />
		<!-- 增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR"	ref="myFilter" />
	</http>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
	我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter" class="com.pitaya.bookingnow.security.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>
	
	<!-- 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--   如果用户的密码采用加密的话，可以加点“盐” -->
				<password-encoder hash="md5" />
			
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="myUserDetailService" class="com.pitaya.bookingnow.security.MyUserDetailService" >
		<beans:property name="userDao" ref="userDao" />
	</beans:bean>
	
	<!-- 
	<beans:bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
		
		<beans:property name="mapperInterface"  value="com.pitaya.bookingnow.dao.security.UserEntityMapper" />   
    </beans:bean>
 -->
 
	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean" class="com.pitaya.bookingnow.security.MyAccessDecisionManager">
	
	</beans:bean>
	
	 <beans:bean id="resourceDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface"  value="com.pitaya.bookingnow.security.dao.ResourceMapper" />   
        <beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />  
    </beans:bean>
    
    <beans:bean id="resourceService" class="com.pitaya.bookingnow.security.service.impl.ResourceService">
        <beans:property name="resourceDao" ref="resourceDao" />  
    </beans:bean>
    
    <beans:bean id="authorityDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<beans:property name="mapperInterface"  value="com.pitaya.bookingnow.security.dao.AuthorityMapper" />   
        <beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />  
    </beans:bean>
    
    <beans:bean id="authorityService" class="com.pitaya.bookingnow.security.service.impl.AuthorityService">
        <beans:property name="authorityDao" ref="authorityDao" />  
    </beans:bean>
    
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"	class="com.pitaya.bookingnow.security.MyInvocationSecurityMetadataSource">
		<beans:property name="resourceService" ref="resourceService" />
		<beans:property name="authorityService" ref="authorityService" />
	</beans:bean>
	

	
</beans:beans>
