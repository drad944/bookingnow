<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-2.5.xsd
   http://www.springframework.org/schema/jee 
   http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">



	<!-- 数据源属性配置文件  -->
	<bean id="configBean" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">    
        <property name="location">    
            <value>classpath:jdbc.properties</value>    
        </property>    
    </bean> 
    
    <!--jdbcTemplate-->  
    <bean id="jdbcTemplate"  
        class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="c3p0DataSource" />  
    </bean> 
	 
	 
	<bean  id="c3p0DataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property   name="driverClass"   value="${jdbc.driverClassName}"   />
		<property   name="jdbcUrl"   value="${jdbc.url}"   />
		<property   name="user"   value="${jdbc.username}"   />
		<property   name="password"   value="${jdbc.password}"   />
		<property   name="autoCommitOnClose"   value="true" />
		<property   name="checkoutTimeout"   value="${cpool.checkoutTimeout}" />
		<property   name="initialPoolSize"   value="${cpool.minPoolSize}" />
		<property   name="minPoolSize"   value="${cpool.minPoolSize}" />
		<property   name="maxPoolSize"   value="${cpool.maxPoolSize}" />
		<property   name="maxIdleTime"   value="${cpool.maxIdleTime}" />
		<property   name="acquireIncrement"  value="${cpool.acquireIncrement}" />
		<property   name="maxIdleTimeExcessConnections"  value="${cpool.maxIdleTimeExcessConnections}" />
	</bean>
	 
	<!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的
dataSource要一致，不然事务就没有作用了 -->
	<bean   id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property   name="dataSource"   ref="c3p0DataSource" />
	</bean>
	 
	<!-- myBatis文件  -->
	<!--     
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">   
		<property name="dataSource" ref="dataSource" />      
		<property name="configLocation" value="classpath:myBatis-config.xml"/>     
	</bean> 
	 -->
	 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="c3p0DataSource" />
		
		<property name="mapperLocations" >
			<list>
				<value>classpath:com/pitaya/bookingnow/dao/*Mapper.xml</value>
			</list>
		</property>
		
	</bean>


	<!-- 配置事务的传播特性  -->
	<bean   id="baseTransactionProxy"  class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property   name="transactionManager"   ref="transactionManager"   />
		   
		<property   name="transactionAttributes">
			<props>
				<prop   key="add*">PROPAGATION_REQUIRED</prop>
				<prop   key="edit*">PROPAGATION_REQUIRED</prop>
				<prop   key="remove*">PROPAGATION_REQUIRED</prop>
				<prop   key="insert*">PROPAGATION_REQUIRED</prop>
				<prop   key="update*">PROPAGATION_REQUIRED</prop>
				<prop   key="del*">PROPAGATION_REQUIRED</prop>
				<prop   key="*">readOnly</prop>
			</props>
		</property>
		 
	</bean>
	 
	
	
	<bean   id="accountDao"   class="com.pitaya.bookingnow.dao.AccountDao">
		   <!-- 这里是接口,不是接口实现类了  -->
		<property   name="sqlSessionFactory"   ref="sqlSessionFactory" />
	</bean>
	  
	<bean   id="accountService"   class="com.pitaya.bookingnow.service.impl.AccountService">
		<property   name="accountDao"   ref="accountDao" />
		 
	</bean>
	  
	<bean   id="accountAction"   class="com.pitaya.bookingnow.action.AccountAction">
		   
		<property   name="accountService"   ref="accountService" />
		 
	</bean>
	
	<context:component-scan base-package="com.pitaya.bookingnow"/>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">   
		<property name="basePackage" value="com.pitaya.bookingnow"/>   
		<property name="markerInterface" value="com.pitaya.bookingnow.SqlMapper"/>
	</bean>

	<!-- 为AccountBiz接口配置事务拦截器，baseTransactionProxy是事务拦截器，在Action中获取这个对象 --> 
	<bean id="accountService" parent="baseTransactionProxy"> 
		<!-- 设置target，也就是AccountBiz的实现类 --> 
		<property name="target" ref="accountService"/> 
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="*" propagation="REQUIRED" />  
        </tx:attributes>  
    </tx:advice>  
      
     <aop:config>  
        <aop:pointcut id="aopPointcut"  
            expression="execution(* com.yeshun.s2smb.service.impl.*Impl.*(..))" />  
        <aop:advisor advice-ref="txAdvice"  
            pointcut-ref="aopPointcut" />         
    </aop:config>  
    <!-- 使用annotation定义事务 end -->  
      
      
     <!-- 采用注释的方式配置bean -->    
    <context:annotation-config />
        
     <!-- 采用annotation的方式配置事务 -->    
    <tx:annotation-driven transaction-manager="transactionManager" />  

</beans>